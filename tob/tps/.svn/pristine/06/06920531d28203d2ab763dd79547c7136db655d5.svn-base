File allumettes/Arbitre.java: 731 tokens, 172 lines
File allumettes/CoupInvalideException.java: 68 tokens, 39 lines
File allumettes/Joueur.java: 74 tokens, 38 lines
File allumettes/OperationInterditeException.java: 19 tokens, 7 lines
File allumettes/ConfigurationException.java: 21 tokens, 16 lines
File allumettes/Proxy.java: 66 tokens, 23 lines
File allumettes/ClassJeu.java: 110 tokens, 33 lines
File allumettes/Jouer.java: 436 tokens, 105 lines
File allumettes/Jeu.java: 23 tokens, 22 lines
File allumettes/Tricheur.java: 50 tokens, 17 lines
File allumettes/Expert.java: 102 tokens, 41 lines
File allumettes/Rapide.java: 54 tokens, 20 lines
File allumettes/Humain.java: 61 tokens, 24 lines
File allumettes/Strategie.java: 13 tokens, 7 lines (not NL-terminated)
File allumettes/Naif.java: 75 tokens, 23 lines
Total input: 15 files (15 new, 0 old), 1903 tokens

allumettes/Jouer.java: line 76-80 [33]
allumettes/Jouer.java: line 82-88
< 		if (chaine.contains("humain")) {
< 			return new Humain();
< 		} else if (chaine.contains("naif")) {
< 			return new Naif();
< 		}
---
> 		else if (chaine.contains("rapide")) {
> 			return new Rapide();
> 		}
> 
> 		else if (chaine.contains("expert")) {
> 			return new Expert();
> 		}

allumettes/Arbitre.java: line 98-101 [31]
allumettes/Arbitre.java: line 108-111
< 			if (prob == "(< 1)") {
< 				System.out.println(str_imp + prise + " " + prob +"\n" );
< 				FaireJouer(joueur, jeu);
< 			}
---
> 			if (prob == "NbAl") {
> 				System.out.println(str_imp + coup + " (> " + NombreAllu + ")\n");
> 				FaireJouer(joueur, jeu);
> 			}

allumettes/Rapide.java: line 1-9 [26]
allumettes/Naif.java: line 1-10
< package allumettes;
< 
< public class Rapide implements Strategie {
< 	
< 	/** Obtenir le nombre d'allumettes que le joueur veut prendre.
< 	 * @return le nombre d'allumettes que le joueur veut prendre */
< 	@Override
<     public int getPrise(Jeu jeu) {
< 		int AlRestantes = jeu.getNombreAllumettes();
---
> package allumettes;
> import java.util.Random;
> 
> public class Naif implements Strategie {
> 
> 	/** Obtenir le nombre d'allumettes que le joueur veut prendre.
> 	 * @return le nombre d'allumettes que le joueur veut prendre */
> 	@Override
>     public int getPrise(Jeu jeu) {
> 		int alRestantes = jeu.getNombreAllumettes();

allumettes/Arbitre.java: line 35-37 [24]
allumettes/Arbitre.java: line 56-63
< 			Strategie Strategie = joueur.getStrategie();
< 			String StrStrat = Strategie.toString();
< 			if (StrStrat.contains("Tricheur") && confiant) {
---
> 		String NomJ = joueur.getNom();
> 		String StrStrat = Strategie.toString();
> //		if (StrStrat.contains("Tricheur") && !confiant)  {
> //			throw new OperationImpossibleException();
> //		}
> 
> 		// Affichage dans le cas d'un humain et d'un tricheur
> 		if (StrStrat.contains("Humain")) {

