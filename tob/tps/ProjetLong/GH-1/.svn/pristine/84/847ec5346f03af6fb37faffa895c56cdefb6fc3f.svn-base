import javax.swing.*;
import java.awt.*;
import javax.swing.event.*;
import java.awt.event.*;
import java.util.*;

public class InteractionSwing {

	// les images à utiliser en fonction de l'état du jeu.
	static ImageIcon perso = new ImageIcon("luffy.jpeg");
	static String reponse1 = "Tu veux rejoindre mon equipage ?";
	static String reponse2 = "VIAAAAAAAAAANDE";
	static String reponse3 = "Promis mange pas poulpi";
	static String reponse4 = "zzzzzzz";
	static String texteperso = "JE SERAI LE ROI DES PIRATES";

// Choix de réalisation :
// ----------------------
//
//  Les attributs correspondant à la structure fixe de l'IHM sont définis
//	« final static » pour montrer que leur valeur ne pourra pas changer au
//	cours de l'exécution.  Ils sont donc initialisés sans attendre
//  l'exécution du constructeur !
//  Les éléments de la vue (IHM)
//  ----------------------------

	/** Fenêtre principale */
	private JFrame fenetre;

	/** Reponses de l'interaction */
	private final JLabel[][] reponses = new JLabel[2][2];

	/** Structure globale */
	private final JLabel[][] cases;
	
	/** Zone qui indique perso qui parle */
	private final JLabel joueur = new JLabel();
	
	/** Zone ou le perso parle */
	private final JLabel texte = new JLabel();
	

// Le constructeur
// ---------------

	/** Construire le jeu de morpion */
	public InteractionSwing() {
		this.cases = null;
		this.fenetre = new JFrame("interaction");
		this.fenetre.setLocation(100, 200);
		Container contenu = fenetre.getContentPane();

		
		contenu.setLayout(new java.awt.BorderLayout(3,1));
		JPanel tablereponse = new JPanel(new java.awt.GridLayout(2,2));
		this.joueur.setIcon(perso);
		this.texte.setText("Bonjour je suis une croix");
		for (int i = 0;i<2;i++) {
			for (int j = 0; j<2; j++) {
				this.reponses[i][j] = new JLabel();
				this.reponses[i][j].addMouseListener(new Click(i,j));
				tablereponse.add(this.reponses[i][j]);
				
			}
		}
		this.reponses[0][0].setText(reponse1);
		this.reponses[0][1].setText(reponse2);
		this.reponses[1][0].setText(reponse3);
		this.reponses[1][1].setText(reponse4);
		
		contenu.add(this.texte, BorderLayout.NORTH);
		contenu.add(this.joueur, BorderLayout.CENTER);
		contenu.add(tablereponse, BorderLayout.SOUTH);
		
		
		this.fenetre.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

		// afficher la fenêtre
		this.fenetre.setSize(400, 400);			// redimmensionner la fenêtre
		this.fenetre.setVisible(true);	// l'afficher
	}

// Quelques réactions aux interactions de l'utilisateur
// ----------------------------------------------------

	/** Recommencer une nouvelle partie. */
	public void recommencer() {
	}


	public class ActionRecommencer implements ActionListener {
		@Override
		public void actionPerformed(ActionEvent arg0) {
			System.out.println("recommencer");
			recommencer();
		}
	}
	
	public class ActionQuitter implements ActionListener {

		@Override
		public void actionPerformed(ActionEvent arg0) {
			System.out.println("recommencer");
			System.exit(0);
		}
	}

	public class Click extends MouseAdapter {
		int i;
		int j;
		public Click(int i, int j) {
			this.i = i;
			this.j = j;
		}
		@Override
		public void mouseClicked(MouseEvent arg0) {
			System.out.println(i + ";" + j);
		}

		
	}
// La méthode principale
// ---------------------

	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				new InteractionSwing();
			}
		});
	}

}
