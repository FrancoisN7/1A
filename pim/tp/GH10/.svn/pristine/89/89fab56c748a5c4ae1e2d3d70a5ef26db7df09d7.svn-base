with ada.unchecked_deallocation;

package body arbre is



    procedure Free is
	new Ada.Unchecked_Deallocation (Object => T_noeud, Name => T_arbre);


    procedure Initialiser(arbre : out T_Arbre) is
    begin
        arbre := null;
    end Initialiser;


    function Est_Vide (arbre : in T_arbre) return Boolean is
    begin
	return arbre=null;
    end Est_vide;

    function est_feuille (arbre : in T_Arbre) return boolean is
    begin
        return est_vide(arbre.all.fils_g) and Est_Vide(arbre.all.fils_d);
    end est_feuille;


    procedure creer (arbre : out T_Arbre; cle : in Integer; donnee : in T_Donnee) is
    begin
        arbre := new T_Noeud;
        arbre.all.cle := cle;
        arbre.all.donnee := donnee;
        arbre.all.fils_g := null;
        arbre.all.fils_d := null;
    end creer;


    function la_cle (arbre : in T_Arbre) return Integer is
    begin
        return arbre.all.cle;
    end la_cle;


    function la_donnee (arbre : in T_Arbre) return T_Donnee is
    begin
        return arbre.all.donnee;
    end la_donnee;


    function fils_gauche (arbre : in T_Arbre) return T_Arbre is
    begin
        return arbre.all.fils_g;
    end fils_gauche;


    function fils_droit (arbre : in T_Arbre) return T_Arbre is
    begin
        return arbre.all.fils_d;
    end fils_droit;



    procedure Fusionner (arbre : out T_Arbre; arbre_g : in T_arbre; arbre_d : in T_arbre) is
    begin
        arbre := new T_Noeud;
        arbre.all.cle := arbre_d.all.cle + arbre_g.all.cle;
        arbre.all.fils_g := arbre_g;
        arbre.all.fils_d := arbre_d;
    end Fusionner;



    procedure vider (arbre : in out T_Arbre) is
    begin
        if arbre = null then
            null;
        elsif arbre.all.fils_g=null and arbre.all.fils_d=null then
            free(arbre);
        else
            vider(arbre.all.fils_g);
            vider(arbre.all.fils_d);
            free(arbre);
        end if;
    end vider;




end arbre;
